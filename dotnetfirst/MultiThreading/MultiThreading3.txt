using System;
// understanding about joins in multithreading
class Program
{
    public static void Thread1()
    {
        System.Console.WriteLine("thread 1 started");
        for (int i = 0; i < 100; i++)
        {
            System.Console.WriteLine("thread 1 " + i);
        }
        System.Console.WriteLine("thread 1 exiting");

    }
    public static void Thread2()
    {
        System.Console.WriteLine("thread 2 started");

        for (int i = 0; i < 100; i++)
        {
            System.Console.WriteLine("thread 2 " + i);
        }
        System.Console.WriteLine("thread 2 exiting");

    }
    public static void Thread3()
    {
        System.Console.WriteLine("thread 3 started");

        for (int i = 0; i < 100; i++)
        {
            System.Console.WriteLine("thread 2 " + i);
        }
        System.Console.WriteLine("thread 3 exiting");

    }

    static void Main(string[] args)

    {
        // System.Console.WriteLine("Main thread started");
        // Thread t1 = new Thread(Thread1);
        // Thread t2 = new Thread(Thread2);
        // Thread t3 = new Thread(Thread3);
        // t1.Start(); t2.Start(); t3.Start();
        // System.Console.WriteLine("Main thread exiting");    // now in this case the main thread will exit in the middle of the excution and rest the remaining threads will be excuted by time sharing 

        // but we want to start main thread at start of the excutio  and stop at the end of the excution

        // so we will use Join()

        System.Console.WriteLine("Main thread started");
        Thread t1 = new Thread(Thread1);
        Thread t2 = new Thread(Thread2);
        Thread t3 = new Thread(Thread3);

        t1.Start(); t2.Start(); t3.Start();
        t1.Join(); t2.Join(); t3.Join();
        System.Console.WriteLine("Main thread exiting");
    }
}